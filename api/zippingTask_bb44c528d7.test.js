// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4


const { zippingTask } = require('./gulpfile');
const { existsSync } = require('fs');
const { join } = require('path');

describe('zippingTask', () => {
  const paths = {
    prod_build: './prod',
    zipped_file_name: 'zipped_code.zip',
  };

  beforeEach(() => {
    // Set up the environment before each test
    jest.mock('fancy-log');
    jest.mock('gulp-zip');
    jest.mock('gulp');
  });

  afterEach(() => {
    // Clean up after each test
    jest.resetAllMocks();
  });

  test('zippingTask should zip the code and return the stream', () => {
    const mockSrc = jest.fn().mockReturnThis();
    const mockPipe = jest.fn().mockReturnThis();
    const mockDest = jest.fn().mockReturnThis();

    require('gulp').src = mockSrc;
    require('gulp').dest = mockDest;
    require('gulp-zip').zip = jest.fn(() => mockPipe);

    zippingTask();

    expect(mockSrc).toHaveBeenCalledWith(`${paths.prod_build}/**`);
    expect(mockPipe).toHaveBeenCalledWith(zip(`${paths.zipped_file_name}`));
    expect(mockDest).toHaveBeenCalledWith(`${paths.prod_build}`);
  });

  test('zippingTask should create the zip file at the specified location', () => {
    zippingTask();

    const zippedFilePath = join(paths.prod_build, paths.zipped_file_name);
    expect(existsSync(zippedFilePath)).toBeTruthy();
  });

  test('zippingTask should log the zipping process', () => {
    const mockLog = jest.fn();
    require('fancy-log').log = mockLog;

    zippingTask();

    expect(mockLog).toHaveBeenCalledWith('zipping the code');
  });
});
