// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4


const { src, dest, series, parallel } = require('gulp');
const del = require('del');
const fs   = require('fs');
const zip = require('gulp-zip');
const log = require('fancy-log');
const webpack_stream = require('webpack-stream');
const webpack_config = require('./webpack.config.js');
var exec = require('child_process')
const { zippingTask } = require('../gulpfile.js');

describe('Zipping Task', () => {
  let paths;

  beforeAll(() => {
    paths = {
      prod_build: 'path_to_production_build',
      zipped_file_name: 'zipped_file.zip'
    };
  });

  beforeEach(() => {
    // Mock the console.log function
    console.log = jest.fn();
  });

  test('should log "zipping the code"', () => {
    zippingTask();
    expect(log).toHaveBeenCalledWith('zipping the code');
  });

  test('should call src with correct path', () => {
    const srcSpy = jest.spyOn(fs, 'src');
    zippingTask();
    expect(srcSpy).toHaveBeenCalledWith(`${paths.prod_build}/**`);
  });

  test('should call pipe with zip and correct file name', () => {
    const pipeSpy = jest.spyOn(fs, 'pipe');
    zippingTask();
    expect(pipeSpy).toHaveBeenCalledWith(zip(`${paths.zipped_file_name}`));
  });

  test('should call dest with correct path', () => {
    const destSpy = jest.spyOn(fs, 'dest');
    zippingTask();
    expect(destSpy).toHaveBeenCalledWith(`${paths.prod_build}`);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });
});
