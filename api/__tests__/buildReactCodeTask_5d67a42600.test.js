// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4


// Import required modules
const { buildReactCodeTask } = require('../gulpfile');
const { exec } = require('child_process');

// Mock the 'child_process' module
jest.mock('child_process', () => {
  return {
    exec: jest.fn()
  };
});

// Test suite
describe('buildReactCodeTask', () => {
  // Reset all mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // Test case 1: Successful execution
  test('should successfully execute the command', (done) => {
    // Mock implementation of exec
    exec.mockImplementation((command, callback) => {
      callback(null, 'stdout', 'stderr');
    });

    // Callback function to be passed to buildReactCodeTask
    const callback = (err) => {
      expect(err).toBeNull();
      expect(exec).toHaveBeenCalledWith('cd ../my-app && npm run build', expect.any(Function));
      done();
    };

    // Call the function
    buildReactCodeTask(callback);
  });

  // Test case 2: Execution with error
  test('should handle error during command execution', (done) => {
    // Mock implementation of exec
    exec.mockImplementation((command, callback) => {
      callback(new Error('Execution failed'), 'stdout', 'stderr');
    });

    // Callback function to be passed to buildReactCodeTask
    const callback = (err) => {
      expect(err).toEqual(new Error('Execution failed'));
      expect(exec).toHaveBeenCalledWith('cd ../my-app && npm run build', expect.any(Function));
      done();
    };

    // Call the function
    buildReactCodeTask(callback);
  });
});
